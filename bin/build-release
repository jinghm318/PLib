#!/usr/bin/php
<?php

//! Skip files matching this pattern
$skip = "/\.|/tmp/.+|nbproject";

setlocale(LC_ALL, 'en_US.UTF-8');

/**
 * Include the main PLib file
*/
require_once dirname(__FILE__) . '/../src/PLib.php';
PLib::Import('plibcli');
PLib::Import('Parser.Syntaxer.STXMarkdown');
PLib::Import('IO.StdIO');
PLib::Import('RC.SVN');

/**
 * Prints usage
*/
function usage()
{
	cwrite("BLACK:Usage:NONE: clean-svn [-r, --root] <source> [-d, --dest] " .
	       "<destination>\n" .
	       "  --root,  -r	<source>       The source to clean\n" .
	       "  --dest,  -d	<destination>  The location to put the copy\n" .
	       "  --no-log -n	<no log>       Skip creating the SVN log\n");
	exit(0);
}

/**
 * Creates the CHANGELOG file
 *
 * @param Dir $src
 * @param Dir $dest
*/
function createChangeLog(Dir $src, Dir $dest)
{
	$logdir = '/__plib/svn';
	$html   = '/__plib/info/CHANGELOG.html';

	`svn update {$src->path}`;
	`svn log {$src->path} --xml > {$dest->path}$logdir/log.xml`;

	copy($dest->path . $logdir . '/log.xml', $src->path . $logdir .'/log.xml');

	$changelog = $dest->path . '/CHANGELOG';

	$fh = fopen($changelog, 'w+');
	fwrite($fh, "CHANGELOG\n" . str_repeat("=", 80) . "\n\n");

	SVN::SetBase($dest->path . "/$logdir");
	$svn = new SVNLog('log.xml');

	while ($rev = $svn->Next()) {
		$lines = explode("\n", $rev->msg);
		$lines = array_map(create_function(
			'$in', 'return $in[0] == " " ? "    " . $in : $in;'),
			$lines
		);
		$rev->msg = implode("\n", $lines);

		fwrite($fh, "**Revision {$rev->revision}: $rev->date**\n\n" .
		            wordwrap($rev->msg, 80) . "\n\n");
	}

	fclose($fh);
	copy($changelog, $src->path . '/CHANGELOG');

	$text = file_get_contents($src->path . '/CHANGELOG');
	$body = "<div>" . STXMarkdown($text) . "</div>";
	file_put_contents($src->path  . $html, $body);
	file_put_contents($dest->path . $html, $body);
}

function ri(Dir $src, Dir $dest)
{
	foreach (array('README','INSTALL','COPYING') as $file) {
		try {
			$fp = new File($src->path . '/' . $file);
			$d = STXMarkdown(file_get_contents((string)$fp));
			file_put_contents($src->path . "/__plib/info/$file.html", $d);
		}
		catch (Exception $e) {
			PLib::PrintException($e);
		}
	}
}

$opt = new Getoptlong('r|--root', 'd|--dest', 'h|--help', 'n|--no-log');
$opt->Get('h') and usage();
$root  = $opt->Get('r');
$dest  = $opt->Get('d');
$nolog = $opt->Get('n');
$root && $dest or usage();


try { $root = new Dir($root); }
catch (Exception $e) { echo PLib::PrintException($e) and exit(1); }

try { $dest = new Dir($dest); }
catch (Exception $e) {
	$stdin = new Stdin();
	cprint("The destination directory BBLACK:{$dest}NONE: doesn't exist!\n".
	       "Do you want me to create it? [Y/n]: ");

	while ($line = $stdin->Read()) {
		if (!preg_match('/y(es)?/i', $line) && !empty($line))
			exit(0);
		break;
	}

	if (!@mkdir($dest, 0766))
		echo "Couldn't create target directory!\n" and exit(1);

	$dest = new Dir($dest);
}

cprint("Creating README, INSTALL, COPYING...");
ri($root, $dest);
cwrite("done!");

$iter    = Dir::RecursiveIterator($root->path);
$skipLen = strlen($root->path);

echo "Copying files...";

foreach ($iter as $path => $file) {
	if (preg_match("#$skip#i", $file))
		continue;

	$localPath = substr($path, $skipLen);
	$newPath   = $dest->path . $localPath;
	$dir       = dirname($newPath);

	if (!is_dir($dir))
		Dir::MkdirHier($dir);

	if (is_dir($path))
		continue;

	copy($path, $newPath);
}

wnl("done!");

if (!$nolog) {
	cprint("Creating changlog...");
	createChangeLog($root, $dest);
	cwrite("done!");
}

$tdir = 'plib-' . PLIB_VERSION;
if (is_dir($tdir))
	Dir::Remove($tdir, true);

cprint("Creating temporary version directory BBLACK:{$tdir}...");
`cp -Rf {$dest->path} $tdir`;
cwrite("done!");

cprint("Creating tar ball...");
`tar -cvvzf {$tdir}.tgz $tdir`;
cwrite("done!");

cprint("Cleaning up...");
Dir::Remove($tdir, true);
cwrite("double done!");
?>
